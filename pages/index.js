import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Stage, Layer } from "react-konva";

import { useState, useEffect, useRef } from "react";

import Rover from "../ui/Rover";
import { handleDirection } from "../utils";

export default function Home() {
  const roverRef = useRef(null);
  const [canvasW] = useState(400);
  const [canvasH] = useState(400);
  const [orientation, setOrientation] = useState("N");
  const [rotation, setRotation] = useState(0);

  const [unit] = useState(40);

  const [roverPos, setRoverPos] = useState({ roverX: 0, roverY: 0 });

  const handleMoove = (e) => {
    let result = {};

    const image = roverRef.current;
    image.offsetX(image.width() / 2);
    image.offsetY(image.height() / 2);

    switch (e.keyCode) {
      case 37:
        // left
        const l = "left";

        result = handleDirection(orientation, l);
        console.log('----left',result)


        if (result.rotate) {
          image.y(image.y() + image.height() / 2);
          image.x(image.x() + image.width() / 2);
          setOrientation(result.state);
          setRotation(result.value);

        } else {
          setOrientation("W");
          setRoverPos({ ...roverPos, roverX: image.x() - unit });
        }

        break;
      case 38:
        // up
        const f = "forward";

        result = handleDirection(orientation, f);
        console.log('----forward',result)
        

        if (result.rotate) {
          image.y(image.y() + image.height() / 2);
          image.x(image.x() + image.width() / 2);
          setOrientation(result.state);
          setRotation(result.value);

        } else {
          setOrientation("N");
          setRoverPos({ ...roverPos, roverY: image.y() - unit });
        }

        break;
      case 39:
        // right
        const r = "right";

        result = handleDirection(orientation, r);

        console.log('----right',result)


        if (result.rotate) {
          image.y(image.y() + image.height() / 2);
          image.x(image.x() + image.width() / 2);
          setOrientation(result.state);
          setRotation(result.value);
        } else {
          setOrientation("E");
          setRoverPos({ ...roverPos, roverX: image.x() + unit });
        }

        break;
      case 40:
        // down
        const d = "down";

        result = handleDirection(orientation, d);

        console.log('----down',result)

        if (result.rotate) {
          image.y(image.y() + image.height() / 2);
          image.x(image.x() + image.width() / 2);
          setOrientation(result.state);
          setRotation(result.value);
        } else {
          setOrientation("S");
          setRoverPos({ ...roverPos, roverY: image.y() + unit });
        }
        break;

      default:
        return;
    }
  };

  useEffect(() => {
    console.log(rotation)
    window.addEventListener("keydown", handleMoove);

    return () => {
      window.removeEventListener("keydown", handleMoove);
    };
  }, [orientation, rotation]);

  return (
    <div className={styles.container}>
      <Head>
        <title>TraceOne Mar Rover</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Rover To Mars!</h1>

        <p className={styles.description}>
          use{" "}
          <code>Left, Up, Right, Down Arrow keyboard mooving the rover</code>
        </p>

        <div className={styles.grid}>
          <Stage className={styles.canvas} width={canvasW} height={canvasH}>
            <Layer>
              <Rover
                x={roverPos.roverX}
                y={roverPos.roverY}
                ref={roverRef}
                rotation={rotation}
              />
            </Layer>
          </Stage>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://alainrobinson.yj.fr"
          target="_blank"
          rel="noopener noreferrer"
        >
          Alain Robinson Portfolio
          <span className={styles.logo}></span>
        </a>
      </footer>
    </div>
  );
}
